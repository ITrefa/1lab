#!/bin/bash

phrase1="1. Print the name of the current directory [no arguments]"
phrase2="2. Change the current directory [path]"
phrase3="3. Print the content of the current directory [no arguments]"
phrase4="4. Create symbolic link [path][link]"
phrase5="5. Execute the entered command [no argument, only a command]"
phrase6="6. Exit the program [no arguments]"
wait="Waiting for your input..."

menu="Choose:
$phrase1
$phrase2
$phrase3
$phrase4
$phrase5
$phrase6
$wait"

errorLog=$HOME/lab1_err
errorLogSize=$(cat $errorLog | wc -c)

function checkErrors {
currentErrorLogSize=$(cat $errorLog | wc -c)

if [ "$currentErrorLogSize" -gt "$errorLogSize" ]
then
echo "1"
else
echo "0"
fi

errorLogSize=$currentErrorLogSize
}

#main_part

while : 
do
	echo "$menu"
	read Keypress
	case "$Keypress" in

	#print the current directory
	1 ) pwd;;

	#change directory
	2 ) echo "Enter a path:"
		read dir_ch
		if ! [ -d "$dir_ch" ] 
		then 
			echo "This directory doesn't exist" >&2
		else
			if ! [ -x "$dir_ch" ]
			then
				 echo "Permession denied" >&2
			fi
		fi 
		cd $dir_ch 2>>/home/s225062/lab1_err;;

	#print the content  
	3 ) ls  2>>/home/s225062/lab1_err
		path=$(pwd)
		if ! [ -d "$path" ]
		then
			echo "This directory doesn't exist anymore" >&2
		else
			if ! [ -r "$path" ] 
			then
				echo "Permession denied" >&2
			fi
		fi;;

	#create symbolic link
	4 ) echo "Enter a path to file:"
		read path_to_file
		echo "Enter a path to link:"
		read path_to_link
		ln  -fs "$path_to_file" "$path_to_link" 2>>/home/s225062/lab1_err
		resultCheck=$( checkErrors)
		if [ "$resultCheck" = 1 ]
		then 
			echo "Directory doesn't exist or you don't have permession" >&2
		fi;;

	#execute the command
	5 ) echo "Enter a command:"
		read command
		if hash "$command" 2>>/home/s225062/lab1_err
		then
			resultCheck=$( checkErrors)
			if [ "$resultCheck" = 1 ]
			then
				 echo "Command cannot be executed" >&2
			else
			$command 2>>/home/s225062/lab1_err
			resultCheck=$( checkErrors) 
				if [ "$resultCheck" = 1 ] 
				then
					echo "This command requires argument, this scrypt can execute only commands without any arguments and keys, sorry for that:(" >&2
				fi
			fi 
		else
			echo "It is not a command, try something else"
		fi;;

	#quit program
	6 ) exit 0;;

	#another input
	* ) echo "Nope, try something else";;

	esac
done
